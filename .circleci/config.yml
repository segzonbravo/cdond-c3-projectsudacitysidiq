version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID}'


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/9XtyjaV32zF9w7FrifZcwX/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if (($SUCCESS == 1))
            then
              cd ~/project/backend
              npm install > /dev/null
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run build
            
  scan-frontend:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical 
      # - slack/notify:
      #     channel: C03RP33BKDX
      #     event: fail
      #     template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
           
  configure-infrastructure:
    docker:
    - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:71:e2:6e:0e:30:ee:b3:ee:f4:22:9e:52:e6:09:02"]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli
           
      - attach_workspace:
          at: ~/
      # - run: 
      #     name: Access inventory.txt
      #     command: cat .circleci/ansible/inventory.txt 
      # - restore_cache:
      #     keys: ['backend-build']
      - run: 
          name: Configure server
          command: | 
            # add environment variables to server
            echo NODE_ENV=production > ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            cat ~/project/backend/.env

            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - attach_workspace:
      #     at: ~/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      # - restore_cache:
      #     keys: ['backend-build']
      - attach_workspace:
          at: ~
      - run:
          name: Run migrations
          command: |
            # Get DB host from AWS and add to env
            export TYPEORM_HOST=$(aws cloudformation list-exports --query "Exports[?Name==\`EndpointAddress-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" --output text)
            echo $TYPEORM_HOST
            echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            cd backend
            # npm install > /dev/null
            # npm run build > /dev/null
            npm run migrations >> migrations.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "...has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/9XtyjaV32zF9w7FrifZcwX/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1' 
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure      

  # deploy-frontend:
  #   docker:
  #     - image: python:3.10-alpine3.16
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           ls 
  #           npm install 
  #           npm run build 
  #           tar -czvf frontend-artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     - image: python:3.10-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["a5:71:e2:6e:0e:30:ee:b3:ee:f4:22:9e:52:e6:09:02"]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip nodejs npm tree aws-cli ansible 
  #     - attach_workspace:
  #         at: ~/
  #     - restore_cache:
  #         keys: [backend-build] 
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend 
  #           npm install 
  #           npm run build 
  #           cd .. 
  #           tar -C backend -czvf artifact.tar.gz . 
  #           mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
  #           mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
  #           cp ~/project/backend/.env .circleci/ansible/roles/deploy/files/backend.env
  #           cd .circleci/ansible
  #           echo "Verifying contents of the inventory.txt file...$(cat -1 inventory.txt)"
  #           cat inventory.txt 
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy-environment: 
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations: 
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     - image: python:3.10-alpine3.16 
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache curl aws-cli
  #     # - attach_workspace:
  #     #     at: ~/
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # export BACKEND_IP=$(tail ~/rpoject/.circleci/ansible/inventory.txt)
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
  #           --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #           if curl -s "${API_URL}/api/status" | grep "ok"
  #           then
  #               return 0
  #           else
  #               return 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-$(AWS_DEFAULT_REGION).amazonaws.com/#/employees"            
  #           echo $URL
  #           if curl ${URL} | grep "Welcome"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y npm nodejs
  #     - run:
  #         name: Update Cloudfront Distribution
  #         command: |
  #           # your code here
  #           export OldWorkflowID=$(aws cloudformation list-exports \
  #           --query "Exports[?Name==\`Cloudfront-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" \
  #           --no-paginate --output text)
  #           echo $OldWorkflowID >> ~/OldWorkflowID.txt
  #           cat ~/OldWorkflowID.txt
  #           # Change the initial stack name, as applicable to you
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name cloudfront-${CIRCLE_WORKFLOW_ID:0:7} \
  #           --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
  #           --tags project=udapeople
  #           echo OldWorkflowID=${OldWorkflowID}
  #           echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}
  #     # - persist_to_workspace:
  #     #     root: ~/
  #     #     paths:
  #     #       - oldWorkflowId.txt
  #     # - attach_workspace:
  #     #     at: ~/
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     # Here's where you will add some code to rollback on failure  

  # cleanup:
    # docker:
    #   - image: amazon/aws-cli
    # steps:
    #   - checkout
    #   - run:
    #       name: Install dependencies
    #       command: yum install tar gzip -y
    #   - attach_workspace:
    #       at: ~/
    #   - run:
    #       name: Get old stack workflow id
    #       command: |
    #         export OldWorkflowID=$(cat ~/oldWorkflowId.txt)
    #         echo OldWorkflowID: "${OldWorkflowID}"

    #   - run:
    #       name: Remove old stacks and files
    #       command: |
    #         export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
    #           --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

    #         export OldWorkflowID=$(cat ~/oldWorkflowId.txt)

    #         echo OldWorkflowID: "${OldWorkflowID}"
    #         echo Stack names: "${STACKS[@]}" 

    #         if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
    #         then
    #           aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
    #           aws s3api delete-bucket --bucket "udapeople-${OldWorkflowID}"
    #           aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
    #           aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"

    #           echo "Old Stacks removed completely"
    #         else
    #           echo "No old stacks to be deleted"
    #         fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]