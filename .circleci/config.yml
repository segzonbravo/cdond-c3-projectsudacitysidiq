version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID}'


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<<parameters.workflow_id >>" --recursive
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -k https://kvdb.io/9XtyjaV32zF9w7FrifZcwX/migration_<<parameters.workflow_id>>)
            echo "$SUCCESS"
            if [[ "${SUCCESS}" == 1 ]];  
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [BE-build]
      - run:
          name: Save environment variables
          command: |
            cat \<< EOF > backend/.env
            ENVIRONMENT=production
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: BE-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [FE-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [BE-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [FE-build]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            

  scan-backend:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [BE-build]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical 
      # - slack/notify:
      #     channel: C03RP33BKDX
      #     event: fail
      #     template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Delete Old Backend Ip Address
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            OLD_BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${OLD_WORKFLOW_ID}" --output text)

            echo $OLD_WORKFLOW_ID
            echo $OLD_BACKEND_IP

            sed -i -e '2d' ~/project/.circleci/ansible/inventory.txt

            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      
           
  configure-infrastructure:
    docker:
    - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:71:e2:6e:0e:30:ee:b3:ee:f4:22:9e:52:e6:09:02"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml -vvv
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Install AWS CLI
          command: apk add --no-cache aws-cli
      - run:
          name: Install NPM
          command: apk add --update npm
      - run:
          name: Install NodeJS
          command: apk add --update nodejs
      - run:
          name: Install CURL
          command: apk add curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Install AWS CLI
          command: apk add --no-cache aws-cli
      - run:
          name: Install NPM
          command: apk add --update npm
      - run:
          name: Install NodeJS
          command: apk add --update nodejs
      - run:
          name: Install CURL
          command: apk add curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5:71:e2:6e:0e:30:ee:b3:ee:f4:22:9e:52:e6:09:02"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install tar
          command: |
            apk add --upgrade tar
      - run:
          name: Install gzip
          command: |
            apk add --upgrade gzip
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Install NPM
          command: apk add --update npm
      - run:
          name: Install NodeJS
          command: apk add --update nodejs
      - run:
          name: Install AWS CLI
          command: apk add --no-cache aws-cli
      - run:
          name: Install CURL
          command: apk add curl
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -----"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            apk add --update npm
            apk add --update nodejs
            apk add --no-cache aws-cli
            apk add curl
      - run:
          name: Get backend url and run backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"

            sleep 2m

            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then 
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install tar gzip -y
      - run:
          name: Update Cloudfront Distribution
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text  > ~/oldWorkflowId.txt  
            cat ~/oldWorkflowId.txt

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - oldWorkflowId.txt
      - attach_workspace:
          at: ~/
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip tree
      - run:
          name: "Get old stack workflow id: Dead-end production stack from Blue Green Deployment "
          command: |
            ls -a
            tree -CL 2
            # Updated a stack in cloudfront-update if created a new one 
            # Fetch the Old workflow ID
            # HINT: 
            # If you updated the manually created cloudfront stack rather than create a new one &
            # to save resources you were deleting infra such as
            ## - deleting stacks when a job fails
            ## - deleted the bucket created manually
            ## - deleting frontend stack and backend stack resources after each workflow so starting new workflows without any automatically created infra
            # then your prior workflow ID will be equal to current workflow ID therefore nothing to cleanup
            # the only aws cloudfront deploys here are manually (shell-commands) for initial cloudfront, deploy-infrastructure (front and back end), and updating cloudfront initially manually deployed
            # Gets WorkflowID output exported after running .circleci/files/cloudfront.yml
            export PriorWorkflowID=$(aws cloudformation \
                    list-exports \
                    --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo "PriorWorkflowID: ${PriorWorkflowID}"
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names  
            export STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            # If more than one stack name with same prefix (e.g. two udapeople-frontend) then need to cleanup
            echo "Stack names: ${STACKS[@]}"
      - run:
          name: "Remove old stacks and files: Remove dead-end production stacks from Blue Green Deployment"
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${PriorWorkflowID}" ]]
            then
              echo "Already clean/nothing to clean"
            else
              echo "Cleaning up"
              echo "Emptying bucket created by .circleci/files/frontend.yml"
              # need to empty bucket before deleting it when deleting frontend stack
              aws s3 rm "s3://udapeople-${PriorWorkflowID}" --recursive
              echo "Deleting frontend stack (S3 bucket and policy) created by .circleci/files/frontend.yml"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${PriorWorkflowID}"
              echo "Deleting backend stack (EC2 instance and rules) created by .circleci/files/backend.yml"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${PriorWorkflowID}"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [build-frontend, build-backend]
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [dev-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]